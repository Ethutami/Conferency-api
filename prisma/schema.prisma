generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model categories {
  id   Int     @id @default(autoincrement())
  icon String? @db.VarChar(255)
  name String  @db.VarChar(255)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model organizator {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizator_name  String    @db.VarChar(150)
  email             String    @unique @db.VarChar(255)
  phone             String?   @db.VarChar(50)
  address           String?
  city              String?   @db.VarChar(100)
  province          String?   @db.VarChar(100)
  country           String?   @default("Indonesia") @db.VarChar(100)
  status            String?   @default("pending") @db.VarChar(20)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  npwp              String?   @db.VarChar(50)
  business_type     String?   @db.VarChar(50)
  taxable           Boolean?  @default(true)
  owner_name        String?   @db.VarChar(150)
  logo_url          String?   @db.VarChar(255)
  website_url       String?   @db.VarChar(255)
  bank_account      Json?
  verification_date DateTime? @db.Timestamp(6)
  notes             String?
  organizer_code    String    @unique @db.VarChar(10)
  voucher           voucher[]
}

model voucher {
  id               Int         @id @default(autoincrement())
  voucher_code     String      @db.VarChar(30)
  voucher_name     String      @db.VarChar(30)
  short_info       String?     @db.VarChar(30)
  organizer_id     String      @db.Uuid
  discount_amount  Decimal?    @db.Decimal(10, 2)
  discount_percent Decimal?    @db.Decimal(5, 2)
  quota            Int?        @default(0)
  usage_count      Int?        @default(0)
  available_from   DateTime?   @db.Timestamp(6)
  available_until  DateTime?   @db.Timestamp(6)
  terms_conditions String?
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  updated_at       DateTime?   @default(now()) @db.Timestamp(6)
  organizator      organizator @relation(fields: [organizer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
